---
import BrandLogo from '@/components/BrandLogo.astro';
import Icon from '@/components/ui/icons/Icon.astro';
import MainLayout from '@/layouts/MainLayout.astro';
import {getDownloadLinks} from '@api/automation';
const pageTitle: string = `Download`;
const data = await getDownloadLinks()

---

<MainLayout
  title={pageTitle}
  structuredData={{
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    '@id': 'https://crawlora.com/contact',
    url: 'https://crawlora.com/contact',
    name: 'Contact Us | Crawlora',
    description:
      "Have questions or want to discuss a project? Reach out, and let's craft the perfect solution with our tools and services.",
    isPartOf: {
      '@type': 'WebSite',
      url: 'https://crawlora.com',
      name: 'Crawlora',
      description:
        'Crawlora is a web crawling platform that automates data extraction, empowering businesses to gather valuable insights efficiently and at scale.',
    },
    inLanguage: 'en-US',
  }}
>
  <div
    class="mx-auto flex min-h-[calc(100vh-427px)] max-w-[85rem] flex-col items-center justify-center px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
  >
    <div class="container mx-auto p-6">
      <!-- Header Section -->
      <div class="mb-10 text-center">
        <h1 class="text-5xl font-bold text-gray-900 dark:text-white">
          Download App
        </h1>
        <p class="mx-auto mt-4 max-w-2xl text-lg text-gray-600 dark:text-white">
          Crawlora is a data aggregation tool for marketers, automating data
          crawling and real-time analysis from platforms.
        </p>
      </div>
      <div class="flex flex-col items-center mt-8 text-center">
        <h2 class="text-3xl font-semibold text-gray-900 dark:text-white mb-6">
          Recommended Downloads
        </h2>
        <div id="download-button" class="flex justify-center gap-4">
          <Icon class="h-4 w-4 ml-2 text-white" name="download" />
        </div>
      </div>
      <!-- Download Cards Section -->
      <div class="mt-10 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3" id="linkData" data-downloadLinkData={JSON.stringify(data)}>
        {
          data.links.map((link) => (
            <div
              class="rounded-lg bg-white dark:bg-neutral-900 p-6 text-center shadow-md transition-transform duration-300 hover:scale-105 hover:shadow-lg"
            >
              <!-- Platform Icon -->
              <div class="mb-4 w-14 h-14  mx-auto rounded-xl flex justify-center items-center">
                <Icon class="h-12 w-12 mx-auto text-gray-700" name={link.icon} />
              </div>
              
              <!-- Platform Name -->
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                {link.name}
              </h3>
              
              <!-- Description -->
              <p class="mt-2 text-sm text-gray-600 dark:text-white">{link.os}</p>
              
              <!-- Download Button -->
              <a
                href="/apply"
                class="mt-4 inline-flex items-center rounded-md bg-orange-500 px-6 py-2 text-sm font-semibold text-white transition duration-200 hover:bg-orange-600"
              >
                <Icon class="h-4 w-4 mr-2 text-white" name="download" />
                <span>Download</span>
              </a>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</MainLayout>


<script is:inline>
const element = document.getElementById("linkData").getAttribute('data-downloadLinkData')
const data  = JSON.parse(element).links

function getOSAndArch() {
  if (typeof window === "undefined" || typeof navigator === "undefined") {
    return { os: "unknown", arch: "unknown" };
  }

  const platform = navigator.platform.toLowerCase();
  const userAgent = navigator.userAgent.toLowerCase();

  let os = "unknown";
  let arch = "unknown";

  // Detect OS
  if (platform.includes("win")) {
    os = "windows";
  } else if (platform.includes("mac") || userAgent.includes("mac")) {
    os = "apple";
    arch = "universal"; // Fallback for universal binaries
   
  } else if (platform.includes("linux")) {
    os = "linux";
    arch = "amd";
   
  } else if (platform.includes("android")) {
    os = "android";
    arch = "arm"; // Most Android devices are ARM-based
  } else if (platform.includes("iphone") || platform.includes("ipad")) {
    os = "ios";
    arch = "arm"; // iOS devices are ARM-based
  }

  return { os, arch };
}
  // Function to display the download message and button
  function displayDownloadOption() {
    const { os, arch } = getOSAndArch();
    const match = data.find(
    (release) => release.os === os && release.arch === arch
  );
  if (match) {
    document.getElementById("download-button").innerHTML = `
      <a href="/apply" class="rounded-md bg-orange-500 px-8 py-4 text-white text-lg font-semibold transition duration-300 transform hover:scale-105 hover:bg-orange-600 shadow-lg">
        Apply For ${match.name}
      </a>
    `;
    
  }
  }
  displayDownloadOption();
</script>



